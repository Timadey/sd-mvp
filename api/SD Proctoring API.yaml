openapi: 3.0.3
info:
  title: SD Proctoring API
  version: 1.0.0
  description: API for SD Proctoring System
paths:
  /api/exam/assign-proctor/:
    post:
      operationId: exam_assign_proctor_create
      tags:
      - exam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignProctor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssignProctor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssignProctor'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignProctor'
          description: ''
  /api/exam/create/:
    post:
      operationId: exam_create_create
      tags:
      - exam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Exam'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Exam'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exam'
          description: ''
  /api/exam/questions/create/:
    post:
      operationId: exam_questions_create_create
      tags:
      - exam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/user/login/:
    post:
      operationId: user_login_create
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john.doe/john.doe@example.com
                password:
                  type: string
                  example: secret123
              required:
              - username
              - password
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Login using username or email address
  /api/user/logout/:
    post:
      operationId: user_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/user/me/:
    get:
      operationId: user_me_retrieve
      tags:
      - Auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBase'
          description: Authenticated user info
  /api/user/refresh/:
    post:
      operationId: user_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  example: <jwt-refresh-token>
              required:
              - refresh
      responses:
        '200':
          description: Token refreshed successfully
        '401':
          description: Invalid refresh token
  /api/user/register/:
    post:
      operationId: user_register_create
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: Create a new user
components:
  schemas:
    AiMonitoringLevelEnum:
      enum:
      - basic
      - standard
      - strict
      type: string
      description: |-
        * `basic` - Basic
        * `standard` - Standard
        * `strict` - Strict
    AssignProctor:
      type: object
      properties:
        exam:
          type: string
          format: uuid
        proctor:
          type: integer
        is_primary:
          type: boolean
        status:
          $ref: '#/components/schemas/AssignProctorStatusEnum'
      required:
      - exam
      - proctor
    AssignProctorStatusEnum:
      enum:
      - assigned
      - active
      - completed
      - removed
      type: string
      description: |-
        * `assigned` - Assigned
        * `active` - Active
        * `completed` - Completed
        * `removed` - Removed
    Exam:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        duration_minutes:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        max_attempts:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        passing_score:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        instructions:
          type: string
          nullable: true
        exam_type:
          $ref: '#/components/schemas/ExamTypeEnum'
        status:
          $ref: '#/components/schemas/ExamStatusEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        proctoring_enabled:
          type: boolean
        ai_monitoring_level:
          $ref: '#/components/schemas/AiMonitoringLevelEnum'
        settings: {}
        created_by:
          type: integer
          readOnly: true
      required:
      - created_by
      - duration_minutes
      - id
      - passing_score
      - title
    ExamStatusEnum:
      enum:
      - draft
      - published
      - archived
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
        * `archived` - Archived
    ExamTypeEnum:
      enum:
      - standard
      - adaptive
      - timed
      type: string
      description: |-
        * `standard` - Standard
        * `adaptive` - Adaptive
        * `timed` - Timed
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question_text:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        time_limit_seconds:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        order_index:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_required:
          type: boolean
        media_urls: {}
        metadata: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        exam:
          type: string
          format: uuid
      required:
      - created_at
      - exam
      - id
      - order_index
      - question_text
      - question_type
      - updated_at
    QuestionTypeEnum:
      enum:
      - multiple_choice
      - true_false
      - short_answer
      - essay
      - code
      - image_based
      - audio_based
      type: string
      description: |-
        * `multiple_choice` - Multiple Choice
        * `true_false` - True/False
        * `short_answer` - Short Answer
        * `essay` - Essay
        * `code` - Code
        * `image_based` - Image-Based
        * `audio_based` - Audio-Based
    RoleEnum:
      enum:
      - admin
      - candidate
      - proctor
      type: string
      description: |-
        * `admin` - Admin
        * `candidate` - Candidate
        * `proctor` - Proctor
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    UserBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - email
      - first_name
      - id
      - last_name
      - role
      - username
    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        password:
          type: string
          writeOnly: true
      required:
      - email
      - first_name
      - id
      - last_name
      - password
      - role
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
